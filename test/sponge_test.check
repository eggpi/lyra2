#include "sponge.h"

#include <stdio.h>
#include <string.h>

#include <check.h>

#test squeeze_IV
    // the output of the squeeze function on a just-initialized
    // sponge in Lyra2's reference SSE implementation.
    const uint8_t expected[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x08, 0xc9, 0xbc, 0xf3, 0x67, 0xe6, 0x09, 0x6a,
        0x3b, 0xa7, 0xca, 0x84, 0x85, 0xae, 0x67, 0xbb,
        0x2b, 0xf8, 0x94, 0xfe, 0x72, 0xf3, 0x6e, 0x3c,
        0xf1, 0x36, 0x1d, 0x5f, 0x3a, 0xf5, 0x4f, 0xa5,
        0x2d, 0x56, 0x47, 0x55, 0x66, 0x10, 0x9f, 0xe6,
        0x27, 0xaf, 0x2a, 0x6d, 0x2e, 0xe8, 0x66, 0xfe,
        0x68, 0x1c, 0x33, 0xac, 0x12, 0xbf, 0xa7, 0xe5,
        0x5a, 0x17, 0x6a, 0x4a, 0x05, 0xcf, 0xc2, 0x0c
    };

    uint8_t squeezed[sizeof(expected) / sizeof(uint8_t)] = {0};

    sponge_t *sponge = sponge_new();
    sponge_squeeze(sponge, squeezed, sizeof(squeezed), SPONGE_FLAG_EXTENDED_RATE);

    ck_assert(!memcmp(squeezed, expected, sizeof(expected) / sizeof(uint8_t)));
    sponge_destroy(sponge);
    return;

#test absorb_block_safe
    // safe full-round block absortion, done at the beginning of the
    // setup phase
    uint8_t data[SPONGE_RATE_SIZE_BYTES] = {
        0x4c, 0x79, 0x72, 0x61, 0x20, 0x73, 0x70, 0x6f,
        0x6e, 0x67, 0x65, 0x73, 0x61, 0x6c, 0x74, 0x73,
        0x61, 0x6c, 0x74, 0x73, 0x61, 0x6c, 0x74, 0x73,
        0x61, 0x6c, 0x74, 0x40, 0x00, 0x00, 0x00, 0x0b,
        0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0a,
        0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x40,
        0x00, 0x00, 0x00 /* ..........................
        ......... padding goes here ................ */
    };

    const uint8_t expected[SPONGE_STATE_SIZE_BYTES] = {
        0x80, 0xb5, 0x0d, 0xa6, 0xec, 0x68, 0xa4, 0xe2,
        0x47, 0xa0, 0x27, 0x59, 0x9c, 0xf3, 0x3f, 0x89,
        0xe0, 0x43, 0x76, 0xd2, 0xff, 0x08, 0xf1, 0x91,
        0xbb, 0x6d, 0x6f, 0x46, 0xe1, 0x23, 0xa5, 0xd8,
        0x0d, 0xb7, 0xc2, 0xc7, 0xb1, 0x38, 0x61, 0x30,
        0x14, 0x5f, 0x21, 0x80, 0xd8, 0x6b, 0x77, 0xba,
        0xc0, 0x8f, 0x7d, 0x52, 0x5f, 0x6e, 0x0e, 0x0f,
        0x16, 0xd5, 0x1e, 0x71, 0x63, 0xc0, 0x29, 0xe2,
        0x15, 0x7c, 0xc9, 0x68, 0x28, 0xd1, 0x3a, 0xaa,
        0x21, 0xef, 0x3e, 0xb7, 0x8f, 0x30, 0xbe, 0x36,
        0x50, 0xb6, 0x55, 0xb9, 0x2c, 0xd6, 0xaa, 0x02,
        0xc8, 0xf8, 0x36, 0xfd, 0x35, 0xcb, 0x6b, 0xe8,
        0x4e, 0x22, 0x78, 0x12, 0xda, 0x43, 0x91, 0x76,
        0x32, 0xf0, 0xf5, 0x1b, 0xeb, 0x89, 0xf3, 0x07,
        0xec, 0x1a, 0x98, 0xd8, 0xad, 0xc1, 0x41, 0xd4,
        0xb8, 0x12, 0x7a, 0x6d, 0x47, 0x7d, 0x4b, 0xfc
    };

    sponge_t *sponge = sponge_new();
    sponge_absorb(sponge, data, 51, 0);

    ck_assert(!memcmp(sponge->state, expected, SPONGE_STATE_SIZE_BYTES));
    sponge_destroy(sponge);
    return;

#test absorb_block_extended
    // full-round absortion with extended rate, done at the end
    // of the wandering phase
    const uint8_t state[SPONGE_STATE_SIZE_BYTES] = {
        0x67, 0xaf, 0x5b, 0x55, 0x80, 0xd4, 0xce, 0xc7,
        0xd9, 0x16, 0x76, 0x4b, 0xe6, 0x65, 0xbf, 0x6f,
        0xd9, 0x46, 0xb1, 0x36, 0xb0, 0x24, 0xf6, 0xe6,
        0x86, 0x31, 0x53, 0x04, 0xb2, 0xa3, 0x39, 0x3c,
        0x72, 0xdf, 0x9c, 0x6d, 0x9e, 0x1f, 0x00, 0x99,
        0x77, 0x88, 0x44, 0xa3, 0x10, 0xb5, 0xf7, 0x8f,
        0x68, 0x69, 0xe4, 0xee, 0x23, 0x52, 0x9c, 0x7b,
        0x1d, 0x1c, 0x21, 0x6b, 0x70, 0x1a, 0xf9, 0xef,
        0x91, 0x62, 0x26, 0x9b, 0x2c, 0xe0, 0x2b, 0xa1,
        0x27, 0x88, 0xc1, 0xd5, 0x39, 0x1c, 0x56, 0x47,
        0x5e, 0xfb, 0x4f, 0xe8, 0xe2, 0x06, 0x95, 0xc8,
        0xed, 0x0d, 0x3c, 0xbd, 0x76, 0xb2, 0x93, 0x8e,
        0xce, 0xef, 0x0d, 0x53, 0x3a, 0xde, 0x70, 0x7b,
        0x15, 0x30, 0xb4, 0xdb, 0x12, 0x17, 0xad, 0x61,
        0xc1, 0x32, 0x61, 0xc0, 0x86, 0x9e, 0xc2, 0x80,
        0xda, 0x51, 0x3a, 0x1f, 0x31, 0x1b, 0xa0, 0x71
    };

    uint8_t data[] = {
        0xb1, 0x62, 0x40, 0x5a, 0xae, 0xc2, 0x0e, 0x13,
        0x46, 0xb3, 0x25, 0x34, 0x2c, 0xa8, 0xab, 0xd1,
        0x60, 0x68, 0x8f, 0xe3, 0x31, 0x57, 0xf7, 0x1b,
        0xff, 0xd0, 0x68, 0x68, 0x2d, 0xec, 0xd5, 0x11,
        0x2f, 0x58, 0xe2, 0xfe, 0x09, 0xac, 0xa7, 0xb9,
        0x72, 0xf0, 0xca, 0xec, 0xba, 0x3a, 0xf4, 0x02,
        0x6c, 0xe3, 0xca, 0x31, 0x14, 0xb5, 0x5e, 0xfb,
        0x95, 0x21, 0x84, 0x17, 0x22, 0x0b, 0xbf, 0xee,
        0x81, 0x57, 0xeb, 0xbc, 0x53, 0x52, 0x19, 0xa2,
        0x59, 0x52, 0xa7, 0xb0, 0x95, 0x74, 0x81, 0x3c,
        0xd5, 0x04, 0xd2, 0x18, 0x71, 0xb2, 0x08, 0xda,
        0xed, 0x0c, 0xdf, 0x98, 0x4a, 0xdc, 0x93, 0xdd
    };

    uint8_t expected[] = {
        0xe5, 0xf2, 0xe3, 0x37, 0xaa, 0x89, 0xf9, 0xdb,
        0x46, 0xb3, 0x51, 0xd9, 0xac, 0x93, 0xd4, 0x16,
        0x53, 0xc3, 0xa9, 0xa7, 0x38, 0xd9, 0x53, 0x59,
        0xd8, 0xea, 0xa6, 0xf2, 0x97, 0xc5, 0x39, 0x0e,
        0xb5, 0x45, 0xca, 0xc1, 0x5e, 0xea, 0x1d, 0x7c,
        0xbe, 0x50, 0xfc, 0xfb, 0xc6, 0x32, 0xb2, 0x99,
        0xe6, 0xfa, 0xf6, 0x84, 0x17, 0x0c, 0x98, 0x0b,
        0x9b, 0x78, 0x65, 0xa7, 0x17, 0x30, 0x50, 0x10,
        0x2b, 0x81, 0x36, 0x9b, 0x0a, 0x4c, 0x5e, 0x4d,
        0xb4, 0x07, 0xfe, 0x0d, 0x97, 0x15, 0x74, 0xef,
        0x92, 0x21, 0xdf, 0x3a, 0x01, 0xbe, 0x66, 0x4b,
        0x23, 0x9b, 0xf7, 0x00, 0xc0, 0x2b, 0x9e, 0xae,
        0x8d, 0x73, 0xa3, 0x6a, 0x67, 0xb7, 0x23, 0x18,
        0xe6, 0x4e, 0xe4, 0xa8, 0x8c, 0x74, 0x18, 0xef,
        0x8f, 0x1d, 0x34, 0x5f, 0x1b, 0x9c, 0x2d, 0x5d,
        0x9f, 0x1f, 0x3e, 0xdb, 0x3f, 0xee, 0x77, 0x97
    };

    sponge_t *sponge = sponge_new();
    memcpy(sponge->state, state, SPONGE_STATE_SIZE_BYTES);
    int flags = SPONGE_FLAG_EXTENDED_RATE | SPONGE_FLAG_ASSUME_PADDING;
    sponge_absorb(sponge, data, sizeof(data), flags);

    ck_assert(!memcmp(sponge->state, expected, SPONGE_STATE_SIZE_BYTES));
    sponge_destroy(sponge);
    return;

#test reduced_extended_duplexing
    // reduced-round duplexing with extended rate, the main operation
    // performed by Lyra2 in its filling loop and wandering phase.
    const uint8_t state[SPONGE_STATE_SIZE_BYTES] = {
        0xd7, 0x78, 0x76, 0xa0, 0x82, 0x2f, 0x53, 0x0a,
        0x46, 0x41, 0xa4, 0xa3, 0x9e, 0xea, 0x15, 0xf2,
        0xfb, 0xfb, 0x64, 0xf4, 0x4a, 0x79, 0x8b, 0xba,
        0x03, 0xc4, 0x43, 0xa6, 0x5b, 0xe8, 0xad, 0x8c,
        0x50, 0xb9, 0x97, 0x71, 0x99, 0x3c, 0x01, 0x36,
        0x59, 0x31, 0x56, 0xbb, 0xef, 0x46, 0xfd, 0xd7,
        0x01, 0x35, 0xae, 0xd2, 0x7a, 0x49, 0x36, 0xa4,
        0x6b, 0x32, 0x6b, 0x95, 0x44, 0x57, 0x95, 0x70,
        0x2b, 0x81, 0x9e, 0x1d, 0x0e, 0xfb, 0x65, 0xbe,
        0x87, 0xc7, 0x14, 0xf1, 0x0d, 0x44, 0x38, 0xcc,
        0xd7, 0x7d, 0xf2, 0xba, 0x78, 0x1f, 0x3b, 0xf3,
        0x11, 0x33, 0x1c, 0x80, 0x96, 0xbf, 0x2f, 0xcc,
        0xe4, 0xb0, 0xe2, 0x98, 0xf1, 0xc0, 0x28, 0xb6,
        0xbb, 0x8f, 0x84, 0x61, 0xcb, 0xa9, 0xea, 0x20,
        0x2e, 0xc2, 0x0e, 0x4e, 0x64, 0x6c, 0x6f, 0x79,
        0xd4, 0x6f, 0xfc, 0xab, 0xf2, 0x67, 0xbd, 0x21
    };

    const uint8_t data[] = {
        0xd5, 0x73, 0x5c, 0x93, 0x83, 0xf5, 0xd6, 0x2a,
        0x31, 0x80, 0x41, 0x3d, 0xd9, 0x00, 0x00, 0x6f,
        0x0a, 0x08, 0xfe, 0x35, 0x83, 0x84, 0xbc, 0xb2,
        0x76, 0xbe, 0xdb, 0x7b, 0xf7, 0xbe, 0xcd, 0x04,
        0x2a, 0x4b, 0x7f, 0x29, 0xdf, 0xd2, 0x9f, 0xe4,
        0x9c, 0xbe, 0x80, 0x82, 0xe6, 0x52, 0xff, 0x87,
        0xf1, 0x8d, 0xdb, 0x40, 0xff, 0x3f, 0x47, 0x53,
        0x2c, 0x47, 0xc0, 0xd0, 0x6a, 0x95, 0x71, 0xa1,
        0x5a, 0x29, 0x95, 0x10, 0x25, 0x74, 0x2b, 0x1e,
        0x5e, 0x9d, 0xfb, 0xf0, 0x27, 0x26, 0xfd, 0x3b,
        0x73, 0xd1, 0x0a, 0x8d, 0xa1, 0x6c, 0x6a, 0x62,
        0x1f, 0x9e, 0x8a, 0x26, 0x34, 0x10, 0x06, 0x19
    };

    uint8_t duplexed[SPONGE_EXTENDED_RATE_SIZE_BYTES] = {0};

    const uint8_t expected[SPONGE_STATE_SIZE_BYTES] = {
        0xfa, 0x08, 0x3d, 0x99, 0xf0, 0xef, 0xe6, 0xb2,
        0x9c, 0x52, 0x18, 0x59, 0xda, 0xcd, 0xb8, 0x4c,
        0x97, 0x59, 0x02, 0x21, 0xc2, 0x94, 0x3c, 0x34,
        0x67, 0x35, 0x75, 0x0a, 0x29, 0x77, 0xd6, 0x87,
        0x4e, 0xef, 0x09, 0xed, 0xa9, 0x1a, 0xbc, 0xc6,
        0x44, 0x90, 0x85, 0xfa, 0xfa, 0x1a, 0x02, 0xe2,
        0xdc, 0xd8, 0x5e, 0x7e, 0xaf, 0xf6, 0xb8, 0x5f,
        0xc8, 0xbb, 0xe5, 0x3b, 0x88, 0x78, 0xe2, 0x33,
        0x21, 0x07, 0x76, 0x7c, 0x92, 0x0f, 0x4d, 0xb8,
        0xe8, 0x16, 0xc7, 0x52, 0x1d, 0xbc, 0x80, 0xeb,
        0x6a, 0x57, 0x48, 0x9a, 0x3c, 0xe1, 0x48, 0x26,
        0x41, 0x4c, 0xb7, 0xc1, 0x60, 0x7f, 0x52, 0xf8,
        0x02, 0xa6, 0xfe, 0x96, 0x0f, 0xfe, 0xa6, 0x7d,
        0x2b, 0xee, 0xfc, 0xf2, 0xf7, 0xe5, 0x11, 0xa7,
        0xa4, 0x36, 0x53, 0xd7, 0x83, 0x3c, 0x83, 0x21,
        0xaa, 0xa8, 0x8c, 0xcc, 0xdb, 0x09, 0x75, 0xfd
    };

    sponge_t *sponge = sponge_new();
    memcpy(sponge->state, state, SPONGE_STATE_SIZE_BYTES);
    sponge_reduced_extended_duplexing(sponge, data, duplexed);

    ck_assert(!memcmp(sponge->state, expected, SPONGE_STATE_SIZE_BYTES));
    ck_assert(!memcmp(sponge->state, duplexed, SPONGE_EXTENDED_RATE_SIZE_BYTES));
    sponge_destroy(sponge);
    return;
