#include "lyra2.h"
#include "sponge.h"

#include <string.h>
#
#include <check.h>

struct sponge_s {
    __m128i state[SPONGE_STATE_LENGTH_I128];
};

void lyra2_setup(void *m, sponge_t *sponge, unsigned int C);

#test test_lyra2_setup
    // the first 256 bytes of the initialized rows 0 and 1 on a sample
    // Lyra2 run. when acquiring this data, the sponge was intentionally
    // left in its initial state for simplicity.
    sponge_t *sponge = sponge_new();
    const unsigned int C = 64;
    uint8_t matrix[2][C*SPONGE_EXTENDED_RATE_LENGTH_I128*sizeof(__m128i)] = {0};
    uint8_t expected[2][256] = {
        {
            0xe1, 0xbe, 0x16, 0x97, 0x1d, 0x45, 0x21, 0x46,
            0xfc, 0x6e, 0xe7, 0x6a, 0x4c, 0x4b, 0x7c, 0xa3,
            0xa9, 0xbc, 0xe5, 0xfe, 0x12, 0xc7, 0xae, 0x1a,
            0x6f, 0xec, 0x0d, 0x25, 0x8e, 0xee, 0x47, 0xe9,
            0x12, 0x59, 0xf5, 0x89, 0x0c, 0x72, 0x4f, 0xf5,
            0xd8, 0xaf, 0x10, 0xad, 0x9e, 0x91, 0x54, 0x86,
            0xbb, 0xba, 0xc1, 0x74, 0x5c, 0x2f, 0x49, 0xa6,
            0x0f, 0x29, 0xca, 0xf2, 0x7c, 0xb9, 0xf8, 0x52,
            0xbb, 0xd8, 0xb9, 0x69, 0xc9, 0xdb, 0x7c, 0xc6,
            0x45, 0x7c, 0x39, 0xa9, 0x3a, 0x53, 0xe9, 0xb1,
            0xe2, 0x66, 0x5d, 0xa3, 0xfa, 0x2d, 0xe0, 0x2c,
            0x17, 0x47, 0x9a, 0x01, 0xb2, 0x12, 0xf3, 0x55,
            0x4f, 0xbf, 0x27, 0x5e, 0x15, 0x80, 0x3d, 0x48,
            0x2e, 0x9c, 0xb1, 0x12, 0x2d, 0xb6, 0xe8, 0x9f,
            0xb7, 0xe7, 0x05, 0x91, 0xe6, 0x59, 0x53, 0xa9,
            0xa8, 0x7f, 0x9d, 0x79, 0xa7, 0xf3, 0xc8, 0x5d,
            0xcd, 0xdd, 0xe9, 0xef, 0x73, 0xc0, 0xc4, 0x3c,
            0xd6, 0xff, 0x61, 0x79, 0x10, 0xe8, 0x9e, 0x9e,
            0x8f, 0x3d, 0x48, 0x18, 0xde, 0x64, 0x24, 0xe2,
            0x4d, 0x82, 0xfc, 0x3a, 0x06, 0xd2, 0xef, 0x65,
            0x1f, 0x45, 0xfd, 0xb6, 0x38, 0xc7, 0xe4, 0x97,
            0x99, 0x7b, 0xc1, 0xe5, 0xb3, 0xd8, 0x5d, 0x87,
            0xe0, 0x61, 0xc6, 0xc4, 0xf0, 0x28, 0x4f, 0x86,
            0x50, 0xea, 0x47, 0x6d, 0x7e, 0x8b, 0xd9, 0xf6,
            0x1d, 0x09, 0xc7, 0x9b, 0x72, 0x40, 0xb1, 0xe3,
            0xeb, 0xd5, 0x8b, 0xaf, 0xef, 0xe4, 0xa6, 0x29,
            0x16, 0x1a, 0x5a, 0xda, 0x04, 0x2a, 0x52, 0x18,
            0x14, 0x9d, 0xad, 0xa1, 0x18, 0xe9, 0xa4, 0xaa,
            0xae, 0x32, 0xa5, 0x4c, 0x59, 0xb3, 0x24, 0x04,
            0x70, 0xc8, 0xf0, 0x88, 0xb7, 0xb8, 0xab, 0x42,
            0x77, 0xf6, 0x2e, 0x8a, 0x30, 0x3d, 0x83, 0x5f,
            0xc4, 0xb7, 0xea, 0xb0, 0xc6, 0xff, 0xdf, 0xe0
        },
        {
            0x2e, 0x0c, 0xa7, 0x0d, 0x7f, 0x62, 0x7a, 0x57,
            0x28, 0xe2, 0x12, 0x0f, 0xe1, 0xdf, 0x21, 0xb5,
            0x7a, 0x5b, 0x03, 0x2f, 0xce, 0xa5, 0x46, 0x5c,
            0x84, 0xcf, 0x7b, 0x64, 0x2b, 0x0c, 0xa4, 0x3b,
            0x27, 0x8a, 0xcf, 0xf1, 0x52, 0x3a, 0x97, 0xbb,
            0xc8, 0xd1, 0x57, 0x88, 0xc5, 0x0f, 0x38, 0x3d,
            0x62, 0xdf, 0x53, 0xe0, 0x12, 0xb5, 0x20, 0x7f,
            0xe3, 0x23, 0x10, 0x4d, 0x76, 0xc8, 0x3a, 0x2c,
            0x6b, 0x43, 0xf1, 0xcb, 0xee, 0x06, 0x22, 0xd2,
            0x68, 0x73, 0xe6, 0xd6, 0xe9, 0x55, 0x4c, 0x79,
            0xa8, 0x8a, 0x09, 0x4c, 0xf5, 0xe5, 0x3f, 0x1d,
            0x8c, 0xe0, 0x33, 0x06, 0x02, 0x8b, 0xa2, 0xdb,
            0xcb, 0xb2, 0x59, 0x2b, 0x10, 0xc4, 0xad, 0x1c,
            0x0f, 0x62, 0x1c, 0xb9, 0xa2, 0xd2, 0x32, 0xe4,
            0xd0, 0xc9, 0x50, 0x1c, 0x5e, 0xfa, 0x5d, 0xfc,
            0x10, 0xee, 0xb5, 0x22, 0x8c, 0xff, 0x04, 0xc4,
            0x98, 0xf0, 0xe4, 0x43, 0xf0, 0xca, 0x16, 0x73,
            0xd1, 0x22, 0xcf, 0x45, 0x34, 0x19, 0x47, 0x1c,
            0xf8, 0x59, 0xe6, 0x70, 0x71, 0xf7, 0x69, 0x4c,
            0xb3, 0x6b, 0x27, 0xff, 0x95, 0x47, 0xf3, 0x1a,
            0xf5, 0xe9, 0x88, 0x11, 0x56, 0x0e, 0x1a, 0x8d,
            0xa6, 0xed, 0x6c, 0xef, 0xf0, 0x9b, 0xb0, 0x86,
            0x92, 0x12, 0x6c, 0x84, 0x9d, 0x31, 0xd5, 0x70,
            0x16, 0x9f, 0x7c, 0x08, 0xd2, 0x21, 0xef, 0x11,
            0xc0, 0xec, 0x0a, 0xe2, 0x05, 0x39, 0x1b, 0xc8,
            0xbe, 0xe8, 0xfd, 0xb0, 0xae, 0x7d, 0x26, 0xb6,
            0x56, 0xf6, 0x97, 0x80, 0x1f, 0x23, 0xa6, 0x0e,
            0x5d, 0x68, 0x80, 0xa3, 0x87, 0xd3, 0x9c, 0xc7,
            0x14, 0x60, 0x8d, 0x79, 0xcf, 0xa4, 0xd8, 0xb7,
            0x90, 0xd0, 0xb0, 0x55, 0x9c, 0xf2, 0x8e, 0xe0,
            0xcd, 0x4e, 0x30, 0x18, 0xd6, 0x88, 0x40, 0x4b,
            0x28, 0xa6, 0xd7, 0xbc, 0x19, 0x6a, 0x56, 0xa9
        }
    };

    lyra2_setup(matrix, sponge, C);

    ck_assert(!memcmp(matrix[0], expected[0], sizeof(expected[0])));
    ck_assert(!memcmp(matrix[1], expected[1], sizeof(expected[1])));

    sponge_destroy(sponge);
    return;
